import pytest
from FCIDUMP_tools.xyz2heisenberg import *
import numpy as np

FILEPATH = "../extra_files/"
PN_parsed = (
    ['Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'N', 'C', 'C', 'O', 'C',
     'S', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O',
     'C', 'S', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'S', 'N',
     'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'O', 'S', 'S', 'S', 'S',
     'S', 'S', 'S', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
     'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
     'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
     'H', 'H', 'H', 'H'], 
np.array([[-8.88046718e+00, -9.26733668e+00,  6.17959730e-01],
          [-9.76818703e+00, -6.93768251e+00,  1.75732838e+00],
          [-7.97847232e+00, -8.12261801e+00,  2.89412217e+00],
          [-7.52271225e+00, -7.12412388e+00,  5.81995392e-01],
          [-5.42475526e+00, -5.42778299e+00,  2.05523098e+00],
          [-6.17468035e+00, -6.05811066e+00,  4.28477811e+00],
          [-6.40580217e+00, -3.62570792e+00,  3.60974582e+00],
          [-4.03577725e+00, -4.57222389e+00,  4.12119315e+00],
          [-9.97392121e+00, -1.43397980e+01,  7.36618224e-01],
          [-1.10992373e+01, -1.34820709e+01,  3.68088814e-01],
          [-1.14413545e+01, -1.34592148e+01, -1.12179689e+00],
          [-1.06929053e+01, -1.39867149e+01, -1.95251494e+00],
          [-1.08091603e+01, -1.20436705e+01,  8.15853999e-01],
          [-9.42840263e+00, -1.12508920e+01, -1.72078890e-01],
          [-1.39381560e+00, -3.31394607e+00,  8.68236840e-01],
          [-1.25482512e+00, -4.66981874e+00,  1.38089360e+00],
          [-1.62533645e+00, -5.79718608e+00,  4.35910414e-01],
          [-7.86543983e-01, -6.63173285e+00,  7.83703624e-02],
          [-2.87690055e+00, -5.77788291e+00, -7.87746665e-03],
          [-3.44595512e+00, -6.86046707e+00, -7.86256184e-01],
          [-2.60278094e+00, -7.33226386e+00, -1.95338518e+00],
          [-2.32731061e+00, -8.53679919e+00, -2.07643296e+00],
          [-4.80874077e+00, -6.45957004e+00, -1.32026537e+00],
          [-5.86929931e+00, -5.87835000e+00, -1.88570697e-01],
          [-1.10887434e+01, -4.12943013e+00, -5.44608699e-01],
          [-1.22166377e+01, -3.77177245e+00,  3.30662878e-01],
          [-1.26932049e+01, -2.32095078e+00,  3.05005832e-01],
          [-1.38974487e+01, -2.15222224e+00,  6.08246307e-02],
          [-1.19457888e+01, -4.10780918e+00,  1.81528107e+00],
          [-1.18060145e+01, -5.74062587e+00,  2.36336939e+00],
          [ 1.31572980e+00, -3.20803417e+00,  4.33590388e+00],
          [ 3.57292796e-01, -2.39617712e+00,  5.07688812e+00],
          [ 4.47730545e-01, -2.52961165e+00,  6.58380094e+00],
          [ 9.75887620e-01, -3.52753896e+00,  7.10257660e+00],
          [-1.05039373e+00, -2.74925634e+00,  4.62921333e+00],
          [-1.86251460e+00, -4.27965271e+00,  4.98836877e+00],
          [-7.18869057e+00, -1.08148293e+01,  4.75667482e+00],
          [-6.01058471e+00, -1.01362075e+01,  5.26361868e+00],
          [-5.18737498e+00, -1.10778822e+01,  6.13130789e+00],
          [-3.96220394e+00, -1.12415324e+01,  5.89520391e+00],
          [-6.46176209e+00, -8.91902684e+00,  6.07124745e+00],
          [-7.53310979e+00, -7.77324407e+00,  5.01307877e+00],
          [-8.53960537e+00, -2.65398756e+00,  6.71448291e+00],
          [-9.11458233e+00, -1.47434832e+00,  6.08258042e+00],
          [-1.06268661e+01, -1.40102272e+00,  6.05459518e+00],
          [-1.11810699e+01, -3.07155360e-01,  6.17876191e+00],
          [-8.61078660e+00, -1.33137182e+00,  4.64963744e+00],
          [-8.38262763e+00, -2.47347170e+00,  3.59564580e+00],
          [-4.44393987e+00,  4.26864242e-01,  6.71776225e+00],
          [-3.56201363e+00,  1.33243208e-01,  5.60322297e+00],
          [-3.28900587e+00,  1.29342763e+00,  4.65647228e+00],
          [-2.30452157e+00,  1.24868608e+00,  3.87393832e+00],
          [-4.15983008e+00, -1.04140222e+00,  4.83008611e+00],
          [-5.61141426e+00, -1.04461260e+00,  4.36501185e+00],
          [-7.77030040e+00, -5.91982180e+00,  2.43696105e+00],
          [-9.91945945e+00, -9.00177631e+00,  2.57708167e+00],
          [-4.53149258e+00, -3.43816105e+00,  2.35608529e+00],
          [-6.67883077e+00, -9.05907802e+00,  1.24116951e+00],
          [-5.72048708e+00, -4.26094935e+00,  5.60843052e+00],
          [-9.44353845e+00, -7.31523665e+00, -3.80196167e-01],
          [-4.26849007e+00, -6.77616467e+00,  3.24042997e+00],
          [-1.85094510e+00, -4.75729309e+00,  2.30138769e+00],
          [-2.10955633e-01, -4.85955548e+00,  1.66305716e+00],
          [-2.36143684e+00, -3.00719519e+00,  9.85343173e-01],
          [-1.17088866e+00, -3.26979679e+00, -1.24242539e-01],
          [-5.60739681e+00, -8.33172291e+00,  6.41871950e+00],
          [-7.07432453e+00, -9.22249816e+00,  6.92928162e+00],
          [-5.33599954e+00, -9.77574447e+00,  4.47165067e+00],
          [-7.93546776e+00, -1.01371947e+01,  4.58637123e+00],
          [-6.98849653e+00, -1.12286389e+01,  3.84828986e+00],
          [-2.56748241e+00, -2.46445599e-01,  5.89241336e+00],
          [-3.92533835e+00,  6.96073014e-01,  7.54876789e+00],
          [-5.00343817e+00, -3.89617607e-01,  6.94967427e+00],
          [-9.74904411e+00, -1.41700858e+01,  1.71371617e+00],
          [-1.02296695e+01, -1.53205376e+01,  6.45023784e-01],
          [-1.20469292e+01, -1.37637558e+01,  8.81378860e-01],
          [-1.23667902e+01, -1.29158834e+01, -1.40459190e+00],
          [-1.05403891e+01, -1.20304670e+01,  1.87960411e+00],
          [-1.17110805e+01, -1.14311226e+01,  7.03142138e-01],
          [-3.57666507e+00, -7.74183096e+00, -1.40298283e-01],
          [-2.28849029e+00, -6.57576478e+00, -2.70284737e+00],
          [-4.65416437e+00, -5.71541874e+00, -2.12070604e+00],
          [-1.09549798e+01, -5.14341220e+00, -4.53571058e-01],
          [-1.02322824e+01, -3.74397159e+00, -1.39487202e-01],
          [-1.30923059e+01, -4.33756755e+00, -1.06491817e-02],
          [-1.20089433e+01, -1.48558098e+00,  5.56573675e-01],
          [-1.27604374e+01, -3.64553004e+00,  2.40222229e+00],
          [-1.10429542e+01, -3.53916254e+00,  2.10084162e+00],
          [ 8.75412693e-01, -4.11891886e+00,  4.18627830e+00],
          [ 2.11886988e+00, -3.40575027e+00,  4.93322433e+00],
          [ 4.81493810e-01, -1.32923755e+00,  4.82343508e+00],
          [-4.27183501e-02, -1.74574439e+00,  7.19950458e+00],
          [-1.68743981e+00, -1.93217252e+00,  4.99282932e+00],
          [-1.02993335e+00, -2.61058710e+00,  3.53596489e+00],
          [-8.05942110e+00, -3.22052193e+00,  6.00821219e+00],
          [-9.25584599e+00, -3.24908850e+00,  7.12552499e+00],
          [-8.81609477e+00, -5.50115664e-01,  6.60033940e+00],
          [-1.11996602e+01, -2.33622930e+00,  5.86490489e+00],
          [-7.66248264e+00, -7.90824679e-01,  4.81812068e+00],
          [-4.00224355e+00,  2.14240902e+00,  4.65433976e+00],
          [-5.55102524e+00, -1.27713343e+00,  3.42278159e+00],
          [-3.54692870e+00, -1.24734094e+00,  3.94748600e+00],
          [-4.09071224e+00, -1.91957146e+00,  5.48755036e+00],
          [-5.71066468e+00, -1.16250530e+01,  6.94214177e+00],
          [-5.22436920e+00, -7.34967167e+00, -1.81394234e+00],
          [-9.25230197e+00, -5.28856657e-01,  4.23207622e+00],
          [-3.53272793e+00, -5.10565652e+00,  3.96357933e-01]]))

class TestXyzParser:
    @pytest.mark.parametrize("xyzfile,expected", [
        (FILEPATH + "PN.xyz", PN_parsed)
    ])
    def test_conversion(self, xyzfile, expected):
        result_elements, result_coords = xyz_parser(xyzfile)
        expected_elements, expected_coords = expected
        
        assert result_elements == expected_elements
        assert np.allclose(result_coords, expected_coords)


class TestMeasureDistance:
    @pytest.mark.parametrize("coord1,coord2,expected", [
        (PN_parsed[1][0], PN_parsed[1][1], 2.7410757009046867),
        (PN_parsed[1][4], PN_parsed[1][10], 10.526009214819119),
        (PN_parsed[1][5], PN_parsed[1][5], 0.0)
    ])
    def test_distance(self, coord1, coord2, expected):
        result = measure_distance(coord1, coord2)
        print(result, expected)
        assert np.isclose(result, expected)


class TestGenCombinations:
    @pytest.mark.parametrize("natom,expected", [
        (2, [(1, 2)]),
        (3, [(1, 2), (1, 3), (2, 3)]),
        (4, [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])
    ])
    def test_combinations(self, natom, expected):
        result = gen_combinations(natom)
        assert result == expected


class TestGenJMatrix:
    PN_J_matrix = np.array([
        [0.0000, 1.0000, 0.5000, 0.33333333, 0.2500, 0.2000],
        [1.0000, 0.0000, 1.0000, 0.5000, 0.33333333, 0.2500],
        [0.5000, 1.0000, 0.0000, 1.0000, 0.5000, 0.33333333],
        [0.33333333, 0.5000, 1.0000, 0.0000, 1.0000, 0.5000],
        [0.2500, 0.33333333, 0.5000, 1.0000, 0.0000, 1.0000],
        [0.2000, 0.2500, 0.33333333, 0.5000, 1.0000, 0.0000]
    ])
    PN_J_matrix_filtered = np.array([
        [0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
        [1.0, 0.0, 1.0, 0.0, 0.0, 0.0],
        [0.0, 1.0, 0.0, 1.0, 0.0, 0.0],
        [0.0, 0.0, 1.0, 0.0, 1.0, 0.0],
        [0.0, 0.0, 0.0, 1.0, 0.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
    ])
    @pytest.mark.parametrize("xyzfile,distance_range,expected", [
        (FILEPATH + "H_6site_chain.xyz", None, PN_J_matrix),
        (FILEPATH + "H_6site_chain.xyz", (0.8, 1.2), PN_J_matrix_filtered)
    ])
    def test_gen_J_matrix(self, xyzfile, distance_range, expected):
        result = gen_J_matrix(xyzfile, distance_range)
        assert np.allclose(result, expected)